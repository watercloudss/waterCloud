server:
  port: 9000
spring:
  application:
    name: cloud-webmagic
  datasource:
    url: jdbc:mysql://localhost:3306/cloud-webmagic?characterEncoding=UTF-8&useUnicode=true&useSSL=false&tinyInt1isBit=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai
    username: root
    password: 123456
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      # 连接池的配置信息
      # 初始化大小，最小，最大
      initial-size: 5
      min-idle: 5
      maxActive: 20
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      validationQuery: SELECT 1 FROM sys_user
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,wall,slf4j
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql\=true;druid.stat.slowSqlMillis\=5000
      web-stat-filter:
        enabled: true
      stat-view-servlet:
        enabled: true
        login-username: admin
        login-password: 123456

  redis:
    host: 127.0.0.1
    port: 6379
    password:
    lettuce:
      pool:
        # 连接池最大连接数(使用负值表示没有限制) 默认为8
        max-active: 8
        # 连接池最大阻塞等待时间(使用负值表示没有限制) 默认为-1
        max-wait: -1ms
        # 连接池中的最大空闲连接 默认为8
        max-idle: 8
        # 连接池中的最小空闲连接 默认为 0
        min-idle: 0
        statViewServlet:
          enabled: true
  kafka:
    #kafka地址，可以指定多个
    bootstrap-servers: 192.168.0.107:9092
    consumer:
      #指定group_id
      group-id: group_id
      #earliest：当各分区下有已提交的 offset 时，从提交的 offset 开始消费；无提交的 offset时，从头开始消费；
      #latest：当各分区下有已提交的 offset 时，从提交的 offset 开始消费；无提交的 offset 时，消费新产生的该分区下的数据；
      auto-offset-reset: earliest
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
#mybatis plus 设置
mybatis-plus:
  mapper-locations: classpath:com/watercloud/webmagic/mapper/*.xml
  global-config:
    banner: true # MP3.0自带的banner
    db-config:
      #主键类型  0:"数据库ID自增",1:"该类型为未设置主键类型", 2:"用户输入ID",3:"全局唯一ID (数字类型唯一ID)", 4:"全局唯一ID UUID",5:"字符串全局唯一ID (idWorker 的字符串表示)";
#      id-type: ASSIGN_ID
      table-underline: true # 默认数据库表下划线命名
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl  # 这个配置会将执行的sql打印出来，在开发或测试的时候可以用
    call-setters-on-nulls: true  # 返回类型为Map,显示null对应的字段
  type-aliases-package: com.watercloud.webmagic.entity  # 指定需要扫描的entity包
#以下为自定义配置
JWTConfig:
  ISSUER: cloud-webmagic
  SECRET: 01ea098224c7d0d2077c14b9a3a1ed16
  EXPIRE_TIME: 1800000
ShiroConfig:
  AnonUrls: /druid/**,/**/*.js,/**/*.css,/**/*.html,/**/*.svg,/**/*.pdf,/**/*.jpg,/**/*.png,/**/*.ico
redission:
  address: redis://127.0.0.1:6379



